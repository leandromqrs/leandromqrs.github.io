---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

// Layout import â€” provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from '../layouts/BaseLayout.astro';

// Component Imports
import CallToAction from '../components/CallToAction.astro';
import Grid from '../components/Grid.astro';
import Hero from '../components/Hero.astro';
import Icon from '../components/Icon.astro';
import Pill from '../components/Pill.astro';
import PortfolioPreview from '../components/PortfolioPreview.astro';
import TechIcon from '../components/TechIcon.astro';

// Page section components
import ContactCTA from '../components/ContactCTA.astro';
import Skills from '../components/Skills.astro';

// Content Fetching: List four most recent work projects
const projects = (await getCollection('work'))
	.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
	.slice(0, 4);

const stacks = [
	{ icon: 'java', name: 'Java' },
	{ icon: 'grails', name: 'Grails' },
	{ icon: 'react', name: 'React' },
	{ icon: 'nodedotjs', name: 'Node.js' },
	{ icon: 'docker', name: 'Docker' },
	{ icon: 'kubernetes', name: 'Kubernetes' },
	{ icon: 'amazonwebservices', name: 'AWS' },
	{ icon: 'python', name: 'Python' },
	{ icon: 'typescript', name: 'TypeScript' },
	{ icon: 'spring', name: 'Spring Boot' },
	{ icon: 'postgresql', name: 'PostgreSQL' },
	{ icon: 'mongodb', name: 'MongoDB' },
	{ icon: 'redis', name: 'Redis' },
	{ icon: 'apachekafka', name: 'Kafka' },
	{ icon: 'jenkins', name: 'Jenkins' },
	{ icon: 'git', name: 'Git' },
	{ icon: 'nginx', name: 'NGINX' },
	{ icon: 'mysql', name: 'MySQL' },
	{ icon: 'html5', name: 'HTML5' },
	{ icon: 'css3', name: 'CSS3' },
	{ icon: 'bootstrap', name: 'Bootstrap' },
	{ icon: 'tailwindcss', name: 'Tailwind CSS' },
	{ icon: 'vuedotjs', name: 'Vue.js' },
	{ icon: 'flutter', name: 'Flutter' },
	{ icon: 'jest', name: 'Jest' },
	{ icon: 'cypress', name: 'Cypress' },
	{ icon: 'webpack', name: 'Webpack' },
	{ icon: 'babel', name: 'Babel' },
	{ icon: 'eslint', name: 'ESLint' },
	{ icon: 'prettier', name: 'Prettier' },
	{ icon: 'postman', name: 'Postman' },
	{ icon: 'jira', name: 'Jira' },
	{ icon: 'github', name: 'GitHub' },
	{ icon: 'gitlab', name: 'GitLab' },
	{ icon: 'bitbucket', name: 'Bitbucket' }
]

// Full Astro Component Syntax:
// https://docs.astro.build/basics/astro-components/
---

<BaseLayout>
	<div class="stack gap-20 lg:gap-48">
		<div class="wrapper stack gap-8 lg:gap-20">
			<header class="hero">
				<Hero
					title="Hello, welcome to my portfolio!"
					tagline="I build scalable systems, integrate complex platforms, and turn ideas into high-performance solutions."
					align="start"
				>
					<div class="roles">
						<Pill><Icon icon="code" size="1.33em" /> Developer</Pill>
						<Pill><Icon icon="terminal-window" size="1.33em" /> System Architect</Pill>
						<Pill><Icon icon="rocket-launch" size="1.33em" /> DevOps & CI/CD</Pill>
					</div>
				</Hero>

				<Image
					alt="Leandro Rodrigues smiling in a green shirt"
					width="480"
					height="620"
					src="/assets/portrait.jpg"
				/>
			</header>

			<Skills />
		</div>

		<main class="wrapper stack gap-20 lg:gap-48">
			<section class="section with-background with-cta">
				<header class="section-header stack gap-2 lg:gap-4">
					<h3>Selected Work</h3>
					<p>Take a look below at some of my featured work for clients from the past few years.</p>
				</header>

				<div class="gallery">
					<Grid variant="offset">
						{
							projects.map((project) => (
								<li>
									<PortfolioPreview project={project} />
								</li>
							))
						}
					</Grid>
				</div>

				<div class="cta">
					<CallToAction href="/work/">
						View All
						<Icon icon="arrow-right" size="1.2em" />
					</CallToAction>
				</div>
			</section>

			<section class="section with-background bg-variant">
				<header class="section-header stack gap-2 lg:gap-4">
					<h3>Stacks</h3>
					<p>
						I have experience working with various technologies and frameworks. Below are some of the key stacks I've worked with.
					</p>
				</header>

				<div class="gallery">
					<Grid variant="small">
						{
							stacks.map((stack) => (
								<li class="stack-card">
									<TechIcon iconName={stack.icon} size={34} />
									<p>{stack.name}</p>
								</li>
							))
						}
					</Grid>
				</div>
			</section>
		</main>

		<ContactCTA />
	</div>
</BaseLayout>

<style>
	.hero {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 2rem;
	}

	.roles {
		display: none;
	}

	.hero img {
		aspect-ratio: 5 / 4;
		object-fit: cover;
		object-position: top;
		border-radius: 1.5rem;
		box-shadow: var(--shadow-md);
	}

	@media (min-width: 50em) {
		.hero {
			display: grid;
			grid-template-columns: 6fr 4fr;
			padding-inline: 2.5rem;
			gap: 3.75rem;
		}

		.roles {
			margin-top: 0.5rem;
			display: flex;
			gap: 0.5rem;
		}

		.hero img {
			aspect-ratio: 3 / 4;
			border-radius: 4.5rem;
			object-fit: cover;
		}
	}

	/* ====================================================== */

	.section {
		display: grid;
		gap: 2rem;
	}

	.with-background {
		position: relative;
	}

	.with-background::before {
		--hero-bg: var(--bg-image-subtle-2);

		content: '';
		position: absolute;
		pointer-events: none;
		left: 50%;
		width: 100vw;
		aspect-ratio: calc(2.25 / var(--bg-scale));
		top: 0;
		transform: translateY(-75%) translateX(-50%);
		background:
			url('/assets/backgrounds/noise.png') top center/220px repeat,
			var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
			var(--gray-999);
		background-blend-mode: overlay, normal, normal, normal;
		mix-blend-mode: var(--bg-blend-mode);
		z-index: -1;
	}

	.with-background.bg-variant::before {
		--hero-bg: var(--bg-image-subtle-1);
	}

	.section-header {
		justify-self: center;
		text-align: center;
		max-width: 50ch;
		font-size: var(--text-md);
		color: var(--gray-300);
	}

	.section-header h3 {
		font-size: var(--text-2xl);
	}

	@media (min-width: 50em) {
		.section {
			grid-template-columns: repeat(4, 1fr);
			grid-template-areas: 'header header header header' 'gallery gallery gallery gallery';
			gap: 5rem;
		}

		.section.with-cta {
			grid-template-areas: 'header header header cta' 'gallery gallery gallery gallery';
		}

		.section-header {
			grid-area: header;
			font-size: var(--text-lg);
		}

		.section-header h3 {
			font-size: var(--text-4xl);
		}

		.with-cta .section-header {
			justify-self: flex-start;
			text-align: left;
		}

		.gallery {
			grid-area: gallery;
		}

		.cta {
			grid-area: cta;
		}
	}

	/* ====================================================== */

	.stack-card {
		display: flex;
		height: 5rem;
		justify-content: center;
		align-items: center;
		text-align: center;
		border: 1px solid var(--gray-800);
		border-radius: 1rem;
		color: var(--gray-300);
		background: var(--gradient-subtle);
		box-shadow: var(--shadow-sm);
		gap: 1rem;
		transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
	}

	.stack-card:hover {
		transform: translateY(-5px);
		box-shadow: var(--shadow-md);
	}

	.stack-card .tech-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		min-width: 2em;
	}

	.stack-card p {
		font-weight: 500;
		font-size: var(--text-md);
	}

	@media (min-width: 50em) {
		.stack-card {
			border-radius: 1rem;
			padding: 0 1.5rem;
			height: 4rem;
		}
	}
</style>
